name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Code quality checks
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy black
        pip install -r requirements.txt
    
    - name: Run ruff linting
      run: ruff check .
    
    - name: Run black formatting check
      run: black --check .
    
    - name: Run mypy type checking
      run: mypy . --ignore-missing-imports

  # Unit tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --tb=short --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: safety check --json
      continue-on-error: true
    
    - name: Run bandit security scan
      run: bandit -r . -f json
      continue-on-error: true

  # Docker build and test
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build --target testing -t kchat:test .
    
    - name: Run tests in Docker
      run: |
        docker run --rm kchat:test
    
    - name: Build production image
      run: |
        docker build --target production -t kchat:latest .
    
    - name: Test production image
      run: |
        docker run --rm --entrypoint python kchat:latest -c "import agents.context; print('OK')"

  # Integration tests with services
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    
    services:
      qdrant:
        image: qdrant/qdrant:v1.7.4
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for Qdrant to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'
    
    - name: Run integration tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
      run: |
        pytest tests/ -k "integration" -v || echo "No integration tests found"

  # Deployment (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, docker, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Uncomment and configure these steps for actual deployment
    # - name: Login to Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}
    
    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     target: production
    #     push: true
    #     tags: |
    #       ghcr.io/${{ github.repository }}:latest
    #       ghcr.io/${{ github.repository }}:${{ github.sha }}
    
    - name: Deployment placeholder
      run: |
        echo "üöÄ Deployment would happen here"
        echo "Current ref: ${{ github.ref }}"
        echo "Current SHA: ${{ github.sha }}"

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, docker, integration]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.lint-and-type-check.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success'
      run: echo "‚úÖ All CI checks passed!"
    
    - name: Notify failure
      if: needs.lint-and-type-check.result == 'failure' || needs.test.result == 'failure' || needs.docker.result == 'failure'
      run: echo "‚ùå Some CI checks failed!"